CREATE EXTENSION IF NOT EXISTS "pgcrypto";

CREATE TABLE IF NOT EXISTS eco_user
(
    id          UUID PRIMARY KEY      DEFAULT gen_random_uuid(),
    email       VARCHAR(255) NOT NULL,
    password    VARCHAR(255) NOT NULL,
    user_status VARCHAR(50)  NOT NULL,
    created_at  TIMESTAMP(0) NOT NULL,
    updated_at  TIMESTAMP(0),
    created_by  VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by  VARCHAR(255),
    deleted     BOOLEAN      NOT NULL DEFAULT FALSE,
    deleted_at  TIMESTAMP(0),
    deleted_by  VARCHAR(255),
    CONSTRAINT eco_user_email_unique UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS eco_customer
(
    id           UUID PRIMARY KEY REFERENCES eco_user (id),
    first_name   VARCHAR(200) NOT NULL,
    last_name    VARCHAR(200) NOT NULL,
    phone_number VARCHAR(11)  NOT NULL,
    created_at   TIMESTAMP(0) NOT NULL,
    updated_at   TIMESTAMP(0),
    created_by   VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by   VARCHAR(255),
    deleted      BOOLEAN      NOT NULL DEFAULT FALSE,
    deleted_at   TIMESTAMP(0),
    deleted_by   VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS eco_seller
(
    id             UUID PRIMARY KEY REFERENCES eco_user (id),
    store_name     VARCHAR(200) NOT NULL,
    mersis_number  VARCHAR(16)  NOT NULL,
    contact_number VARCHAR(11)  NOT NULL,
    seller_status  VARCHAR(50)  NOT NULL,
    created_at     TIMESTAMP(0) NOT NULL,
    updated_at     TIMESTAMP(0),
    created_by     VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by     VARCHAR(255),
    deleted        BOOLEAN      NOT NULL DEFAULT FALSE,
    deleted_at     TIMESTAMP(0),
    deleted_by     VARCHAR(255),
    CONSTRAINT eco_seller_mersis_number_unique UNIQUE (mersis_number)
);

CREATE TABLE IF NOT EXISTS eco_address
(
    id           UUID PRIMARY KEY       DEFAULT gen_random_uuid(),
    title        VARCHAR(200)  NOT NULL,
    first_name   VARCHAR(200)  NOT NULL,
    last_name    VARCHAR(200)  NOT NULL,
    phone        VARCHAR(11)   NOT NULL,
    city         VARCHAR(200)  NOT NULL,
    district     VARCHAR(200)  NOT NULL,
    neighborhood VARCHAR(200)  NOT NULL,
    full_address VARCHAR(1000) NOT NULL,
    is_default   BOOLEAN       NOT NULL DEFAULT FALSE,
    created_at   TIMESTAMP(0)  NOT NULL,
    updated_at   TIMESTAMP(0),
    created_by   VARCHAR(255)  NOT NULL DEFAULT 'eco',
    updated_by   VARCHAR(255)
);

CREATE INDEX idx_address_city ON eco_address (city);
CREATE INDEX idx_address_city_district ON eco_address (city, district);
CREATE INDEX idx_address_city_district_neighborhood ON eco_address (city, district, neighborhood);

CREATE TABLE IF NOT EXISTS eco_customer_address
(
    id          UUID PRIMARY KEY REFERENCES eco_address (id),
    customer_id UUID         NOT NULL,
    created_at  TIMESTAMP(0) NOT NULL,
    updated_at  TIMESTAMP(0),
    created_by  VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by  VARCHAR(255),
    CONSTRAINT fk_eco_customer_address_eco_customer_customer_id FOREIGN KEY (customer_id) REFERENCES eco_customer (id)
);

CREATE TABLE IF NOT EXISTS eco_guest_address
(
    id         UUID PRIMARY KEY REFERENCES eco_address (id),
    session_id VARCHAR(100) NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0),
    created_by VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS eco_seller_address
(
    id         UUID PRIMARY KEY REFERENCES eco_address (id),
    seller_id  UUID         NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0),
    created_by VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by VARCHAR(255),
    CONSTRAINT fk_eco_seller_address_eco_seller_seller_id FOREIGN KEY (seller_id) REFERENCES eco_seller (id)
);

CREATE TABLE IF NOT EXISTS eco_brand
(
    id         BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name       VARCHAR(200) NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0),
    created_by VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by VARCHAR(255),
    deleted    BOOLEAN      NOT NULL DEFAULT FALSE,
    deleted_at TIMESTAMP(0),
    deleted_by VARCHAR(255),
    CONSTRAINT eco_brand_name_unique UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS eco_category
(
    id         BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name       VARCHAR(200) NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0),
    created_by VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by VARCHAR(255),
    deleted    BOOLEAN      NOT NULL DEFAULT FALSE,
    deleted_at TIMESTAMP(0),
    deleted_by VARCHAR(255),
    CONSTRAINT eco_category_name_unique UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS eco_product
(
    id          BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    brand_id    BIGINT         NOT NULL,
    name        VARCHAR(200)   NOT NULL,
    description TEXT           NOT NULL,
    price       NUMERIC(19, 2) NOT NULL,
    is_active   BOOLEAN        NOT NULL DEFAULT FALSE,
    is_verified BOOLEAN        NOT NULL DEFAULT FALSE,
    created_at  TIMESTAMP(0)   NOT NULL,
    updated_at  TIMESTAMP(0),
    created_by  VARCHAR(255)   NOT NULL DEFAULT 'eco',
    updated_by  VARCHAR(255),
    deleted     BOOLEAN        NOT NULL DEFAULT FALSE,
    deleted_at  TIMESTAMP(0),
    deleted_by  VARCHAR(255),
    CONSTRAINT fk_eco_product_eco_brand_id FOREIGN KEY (brand_id) REFERENCES eco_brand (id)
);

CREATE TABLE IF NOT EXISTS eco_product_image
(
    id         UUID PRIMARY KEY       DEFAULT gen_random_uuid(),
    product_id BIGINT        NOT NULL,
    image_url  VARCHAR(2000) NOT NULL,
    alt_text   VARCHAR(255),
    created_at TIMESTAMP(0)  NOT NULL,
    updated_at TIMESTAMP(0),
    created_by VARCHAR(255)  NOT NULL DEFAULT 'eco',
    updated_by VARCHAR(255),
    deleted    BOOLEAN       NOT NULL DEFAULT FALSE,
    deleted_at TIMESTAMP(0),
    deleted_by VARCHAR(255),
    CONSTRAINT fk_eco_product_image_eco_product_id FOREIGN KEY (product_id) REFERENCES eco_product (id)
);

CREATE TABLE IF NOT EXISTS eco_product_category
(
    id          BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    product_id  BIGINT       NOT NULL,
    category_id BIGINT       NOT NULL,
    created_at  TIMESTAMP(0) NOT NULL,
    updated_at  TIMESTAMP(0),
    created_by  VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by  VARCHAR(255),
    CONSTRAINT fk_eco_product_category_eco_product_id FOREIGN KEY (product_id) REFERENCES eco_product (id),
    CONSTRAINT fk_eco_product_category_eco_category_id FOREIGN KEY (category_id) REFERENCES eco_category (id)
);

CREATE TABLE IF NOT EXISTS eco_cart
(
    id              UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    subtotal        NUMERIC(19, 2) NOT NULL,
    tax_amount      NUMERIC(19, 2) NOT NULL,
    shipping_amount NUMERIC(19, 2) NOT NULL,
    discount_amount NUMERIC(19, 2) NOT NULL,
    grand_total     NUMERIC(19, 2) NOT NULL,
    currency        VARCHAR(10)    NOT NULL,
    cart_status     VARCHAR(50)    NOT NULL,
    created_at      TIMESTAMP(0)   NOT NULL,
    updated_at      TIMESTAMP(0)
);

CREATE TABLE IF NOT EXISTS eco_customer_cart
(
    id          UUID PRIMARY KEY REFERENCES eco_cart (id),
    customer_id UUID         NOT NULL,
    created_at  TIMESTAMP(0) NOT NULL,
    updated_at  TIMESTAMP(0),
    CONSTRAINT fk_eco_customer_cart_eco_customer_customer_id FOREIGN KEY (customer_id) REFERENCES eco_customer (id)
);

CREATE TABLE IF NOT EXISTS eco_guest_cart
(
    id         UUID PRIMARY KEY REFERENCES eco_cart (id),
    session_id VARCHAR(100) NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0)
);

CREATE TABLE IF NOT EXISTS eco_cart_item
(
    id               UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cart_id          UUID           NOT NULL,
    product_id       BIGINT         NOT NULL,
    price            NUMERIC(19, 2) NOT NULL,
    quantity         INTEGER        NOT NULL,
    discount_amount  NUMERIC(19, 2) NOT NULL,
    cart_item_status VARCHAR(50)    NOT NULL,
    created_at       TIMESTAMP(0)   NOT NULL,
    updated_at       TIMESTAMP(0),
    CONSTRAINT fk_eco_cart_item_eco_cart_id FOREIGN KEY (cart_id) REFERENCES eco_cart (id),
    CONSTRAINT fk_eco_cart_item_eco_product_id FOREIGN KEY (product_id) REFERENCES eco_product (id)
);

CREATE TABLE IF NOT EXISTS eco_order
(
    id              UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    first_name      VARCHAR(200)   NOT NULL,
    last_name       VARCHAR(200)   NOT NULL,
    email           VARCHAR(255)   NOT NULL,
    phone           VARCHAR(11)    NOT NULL,
    city            VARCHAR(200)   NOT NULL,
    district        VARCHAR(200)   NOT NULL,
    neighborhood    VARCHAR(200)   NOT NULL,
    full_address    VARCHAR(1000)  NOT NULL,
    subtotal        NUMERIC(19, 2) NOT NULL,
    tax_amount      NUMERIC(19, 2) NOT NULL,
    shipping_amount NUMERIC(19, 2) NOT NULL,
    discount_amount NUMERIC(19, 2) NOT NULL,
    grand_total     NUMERIC(19, 2) NOT NULL,
    currency        VARCHAR(10)    NOT NULL,
    promo_code      VARCHAR(100),
    note            varchar(1000),
    order_status    VARCHAR(50)    NOT NULL,
    created_at      TIMESTAMP(0)   NOT NULL,
    updated_at      TIMESTAMP(0)
);

CREATE TABLE IF NOT EXISTS eco_customer_order
(
    id          UUID PRIMARY KEY REFERENCES eco_order (id),
    customer_id UUID         NOT NULL,
    created_at  TIMESTAMP(0) NOT NULL,
    updated_at  TIMESTAMP(0),
    CONSTRAINT eco_customer_order_eco_customer_id FOREIGN KEY (customer_id) REFERENCES eco_customer (id)
);

CREATE TABLE IF NOT EXISTS eco_guest_order
(
    id         UUID PRIMARY KEY REFERENCES eco_order (id),
    session_id VARCHAR(100) NOT NULL,
    created_at TIMESTAMP(0) NOT NULL,
    updated_at TIMESTAMP(0)
);

CREATE TABLE IF NOT EXISTS eco_order_item
(
    id                UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id          UUID           NOT NULL,
    product_id        BIGINT         NOT NULL,
    price             NUMERIC(19, 2) NOT NULL,
    quantity          INTEGER        NOT NULL,
    discount_amount   NUMERIC(19, 2) NOT NULL,
    order_item_status VARCHAR(50)    NOT NULL,
    created_at        TIMESTAMP(0)   NOT NULL,
    updated_at        TIMESTAMP(0),
    CONSTRAINT fk_eco_order_item_eco_order_id FOREIGN KEY (order_id) REFERENCES eco_order (id),
    CONSTRAINT fk_eco_order_item_eco_product_id FOREIGN KEY (product_id) REFERENCES eco_product (id)
);

CREATE TABLE IF NOT EXISTS eco_payment
(
    id               UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id         UUID           NOT NULL,
    payment_method   VARCHAR(50)    NOT NULL,
    payment_provider VARCHAR(100)   NOT NULL,
    transaction_id   VARCHAR(100)   NOT NULL,
    amount           NUMERIC(19, 2) NOT NULL,
    currency         VARCHAR(10)    NOT NULL,
    paid_at          TIMESTAMP(0)   NOT NULL,
    error_message    VARCHAR(1000),
    payment_status   VARCHAR(50)    NOT NULL,
    created_at       TIMESTAMP(0)   NOT NULL,
    updated_at       TIMESTAMP(0),
    CONSTRAINT fk_eco_payment_eco_order_id FOREIGN KEY (order_id) REFERENCES eco_order (id)
);

CREATE TABLE IF NOT EXISTS eco_inventory
(
    id             BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    product_id     BIGINT       NOT NULL,
    warehouse      VARCHAR(200) NOT NULL,
    stock_quantity INTEGER      NOT NULL,
    created_at     TIMESTAMP(0) NOT NULL,
    updated_at     TIMESTAMP(0),
    created_by     VARCHAR(255) NOT NULL DEFAULT 'eco',
    updated_by     VARCHAR(255),
    constraint fk_eco_inventory_eco_product_id FOREIGN KEY (product_id) REFERENCES eco_product (id)
);